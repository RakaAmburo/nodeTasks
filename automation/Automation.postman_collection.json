{
	"info": {
		"_postman_id": "bdd8ff99-d362-4f12-b7be-7d151a2a851f",
		"name": "Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "https://192.168.1.132:8095/send",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');\r",
							"\r",
							"//let token = Math.floor(Math.random() * 99)\r",
							"const strategy = [[9, 9, 2, 4, 2, 3], [1, 6, 3, 9, 5, 7], [8, 7, 8, 3, 5, 9], [9, 9, 9, 9, 9, 6], \r",
							"[4, 6, 1, 1, 2, 5], [2, 5, 7, 5, 3, 9], [5, 5, 5, 8, 9, 6], [6, 7, 2, 9, 8, 9], [9, 2, 7, 6, 4, 3], \r",
							"[9, 3, 9, 2, 3, 4], [4, 1, 2, 3, 3, 4], [4, 4, 7, 5, 9, 8], [1, 6, 6, 6, 8, 2], [5, 9, 5, 7, 9, 4], \r",
							"[1, 5, 9, 8, 5, 8], [8, 5, 4, 2, 8, 2], [9, 7, 7, 1, 9, 8], [4, 7, 7, 4, 6, 5], [4, 7, 8, 8, 6, 1], \r",
							"[6, 3, 1, 4, 9, 6], [9, 9, 1, 8, 9, 6], [2, 5, 2, 4, 3, 6], [8, 8, 2, 1, 2, 7], [6, 8, 1, 5, 4, 8], \r",
							"[2, 7, 3, 4, 1, 6], [4, 3, 4, 3, 6, 4], [3, 9, 3, 9, 3, 5], [7, 5, 2, 6, 4, 4], [9, 5, 7, 5, 2, 8], \r",
							"[9, 3, 9, 8, 6, 3], [6, 4, 5, 7, 6, 8], [4, 2, 9, 4, 8, 5], [4, 8, 8, 3, 6, 9], [4, 7, 3, 1, 9, 8], \r",
							"[5, 3, 8, 1, 9, 7], [7, 2, 4, 5, 8, 8], [3, 3, 7, 8, 4, 9], [5, 5, 1, 4, 1, 4], [1, 7, 8, 1, 7, 8], \r",
							"[6, 1, 2, 6, 7, 6], [1, 3, 6, 3, 9, 7], [3, 6, 2, 6, 4, 2], [4, 6, 2, 8, 5, 1], [9, 7, 2, 2, 8, 6], \r",
							"[7, 1, 7, 9, 1, 8], [6, 3, 1, 5, 8, 8], [9, 3, 7, 4, 1, 9], [1, 1, 8, 2, 3, 7], [1, 7, 2, 7, 5, 8], \r",
							"[6, 1, 4, 3, 8, 5], [6, 3, 9, 4, 6, 5], [7, 5, 7, 8, 9, 2], [1, 7, 9, 9, 9, 8], [2, 1, 1, 2, 4, 2], \r",
							"[6, 7, 6, 1, 9, 2], [8, 3, 8, 4, 6, 3], [6, 7, 4, 2, 5, 7], [9, 6, 9, 6, 8, 3], [6, 2, 9, 5, 5, 2], \r",
							"[9, 1, 2, 6, 1, 5], [7, 5, 6, 7, 6, 9], [7, 2, 4, 2, 9, 7], [4, 4, 5, 4, 6, 8], [9, 5, 8, 5, 3, 4], \r",
							"[7, 5, 7, 2, 3, 6], [6, 6, 8, 3, 3, 7], [9, 4, 5, 1, 6, 7], [8, 4, 8, 5, 3, 9], [8, 4, 4, 7, 3, 8], \r",
							"[5, 8, 2, 1, 5, 1], [2, 7, 1, 1, 9, 2], [7, 4, 2, 5, 1, 3], [3, 8, 2, 3, 4, 6], [6, 8, 2, 8, 8, 5], \r",
							"[4, 8, 1, 9, 2, 4], [2, 4, 8, 8, 2, 4], [3, 2, 8, 1, 4, 3], [9, 2, 8, 2, 9, 5], [5, 1, 5, 5, 9, 6], \r",
							"[8, 1, 5, 9, 8, 4], [4, 3, 5, 5, 4, 9], [6, 2, 1, 4, 5, 2], [4, 8, 7, 9, 6, 1], [5, 6, 1, 3, 3, 2], \r",
							"[6, 2, 1, 7, 5, 9], [4, 1, 5, 6, 6, 6], [1, 4, 5, 3, 3, 7], [9, 4, 9, 8, 7, 7], [5, 7, 4, 5, 2, 8], \r",
							"[4, 7, 1, 4, 7, 1], [5, 5, 4, 3, 9, 9], [7, 3, 4, 5, 7, 7], [9, 4, 5, 8, 4, 8], [7, 4, 8, 8, 7, 1], \r",
							"[1, 9, 1, 3, 3, 2], [1, 1, 6, 7, 1, 8], [1, 2, 7, 1, 1, 3], [9, 9, 5, 3, 2, 4], [3, 2, 6, 3, 7, 6], \r",
							"[7, 6, 2, 1, 2, 4]];\r",
							"\r",
							"let hour = moment().hour()\r",
							"let minute = moment().minute()\r",
							"let day = new Number(moment().format('D'))\r",
							"let month = new Number(moment().format('M'))\r",
							"let year = moment().year() - 2000\r",
							"let dayOfYear = moment().dayOfYear()\r",
							"\r",
							"let ran = Math.floor(Math.random() * 99)\r",
							"\r",
							"let card = strategy[ran]\r",
							"\r",
							"let result = (hour + card[0]) * (minute + card[1]) * (day + card[2]) * (month + card[3]) * (year + card[4]) * (dayOfYear + card[5])\r",
							"\r",
							"let parcial = result-card[0]-card[2]-card[5]\r",
							"\r",
							"let ranString = ran.toString()\r",
							"let pre, post\r",
							"if (ranString.length == 1){\r",
							"   pre = 'H'\r",
							"   post = ranString\r",
							"} else {\r",
							"    let splited = ranString.split('')\r",
							"    pre = splited[0]\r",
							"    post = splited[1]\r",
							"}\r",
							"let token = pre + parcial.toString().replace(/0/g, 'X') + post\r",
							"\r",
							"let rawStr = CryptoJS.enc.Utf8.parse(token)\r",
							"baseToken = CryptoJS.enc.Base64.stringify(rawStr);\r",
							"\r",
							"let scrambleddNumbers = \"7925163804\"\r",
							"let scrambledLetters = \"gNQnPFpwRMhsvBWrJySOfxUDjHelCXAGaqtzEkuZKIdcVobLmYiT\"\r",
							"let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r",
							"\r",
							"let scrambledBaseToken = baseToken.replace(/([a-zA-Z]{1})/g, (letter) => {\r",
							"   let realPos = letters.indexOf(letter)\r",
							"   return scrambledLetters.charAt(realPos)\r",
							"});\r",
							"\r",
							"scrambledBaseToken = scrambledBaseToken.replace(/([0-9]{1})/g, (number) => {\r",
							"   return scrambleddNumbers.charAt(new Number(number))\r",
							"});\r",
							"\r",
							"postman.setEnvironmentVariable(\"my-token\", scrambledBaseToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{my-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"possibleMessages\": [\r\n        \"amazon test\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://192.168.1.132:8095/send",
					"protocol": "https",
					"host": [
						"192",
						"168",
						"1",
						"132"
					],
					"port": "8095",
					"path": [
						"send"
					]
				}
			},
			"response": []
		}
	]
}